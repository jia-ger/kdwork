对于给定的一段正整数序列，逆序对就是序列中 ai>aj 且 i<j 的有序对。知道这概念后，他们就比赛谁先算出给定的一段正整数序列中逆序对的数目。注意序列中可能有重复数字。

题解
#include <bits/stdc++.h>
using namespace std;
int n, a[5000001], b[5000001];
long long ans;
inline void msort(int l, int r)//归并排序
{
	int mid = (l + r) / 2;//取中间 
	if(l == r)//若l == r了，就代表这个子序列就只剩1个元素了，需要返回 
	{
		return;
	}
	else
	{
		msort(l, mid);//分成l和中间一段，中间 + 1和r一段（二分） 
		msort(mid + 1, r);
	}
	int i = l;//i从l开始，到mid，因为现在排序的是l ~ r的区间且要二分合并 
	int j = mid + 1;//j从mid + 1开始，到r原因同上
	int t = l;//数组b的下标，数组b存的是l ~ r区间排完序的值 
	while(i <= mid && j <= r)//同上i，j的解释 
	{
		if(a[i] > a[j])//如果前面的元素比后面大(l ~ mid中的元素 > mid + 1 ~ r中的元素)(逆序对出现!!!) 
		{ 
			ans += mid - i + 1;//由于l ~ mid和mid + 1 ~ r都是有序序列所以一旦l ~ mid中的元素 > mid + 1 ~ r中的元素而又因为第i个元素 < i + 1 ~ mid那么i + 1 ~ mid的元素都 > 第j个元素。所以+的元素个数就是i ~ mid的元素个数，及mid - i + 1(归并排序里没有这句话，求逆序对里有) 
			b[t++] = a[j];//第j个元素比i ~ mid的元素都小，那么第j个元素是目前最小的了，就放进b数组里 
			++j;//下一个元素(mid + 1 ~ r的元素小，所以加第j个元素) 
		}
		else
		{
			b[t++] = a[i];//i小，存a[i] 
			++i;//同理 
		}
	}
	while(i <= mid)//把剩的元素(因为较大所以在上面没选) 
	{
		b[t++] = a[i];//存进去 
		++i; 
	}
	while(j <= r)//同理 
	{
		b[t++] = a[j];
		++j;
	}
	for( int i = l; i <= r; ++i)//把有序序列b赋值到a里 
	{
		a[i] = b[i];
	}
	return;
}
int main()
{
	scanf("%d", &n);
	for( int i = 1; i <= n; ++i)
	{
		scanf("%d", &a[i]);
	}
	msort(1, n);//一开始序列是1 ~ n 
	printf("%lld", ans);
	return 0;
}
