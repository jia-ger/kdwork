

#include <bits/stdc++.h>
using namespace std;
#define itn int
#define icn cin
#define int long long
#define endl '\n'
typedef pair<int,int> PII;
const int N=1e5+10;
const int INF=1e18;
const int mod=998244353;
#define ll __int128


void solve()
{   
    int k, x;
    icn >> k >> x;
    int total = 1LL<<(k + 1);
    int initial =1LL<<k;
    int target_a = x;
    int target_b = total - x;
    queue<pair<PII, string>> q;
    map<PII, int> visited;
    
    q.push({{target_a, target_b}, ""});
    visited[{target_a, target_b}] = 1;
    
    string ans;
    while (!q.empty()) {
      auto t= q.front();      
        int a=t.first.first;
        int b=t.first.second;
        string steps=t.second;
        q.pop();
        
        if (a == initial && b == initial) {
            ans = steps;
            break;
        }
        
        if (steps.size() >= 120) continue;
        
        if (b>a) {
            int new_a = a*2;
            int new_b = b-a;
            if (!visited.count({new_a, new_b})) {
                visited[{new_a, new_b}] = 1;
                q.push({{new_a, new_b}, steps + "1"});
            }
        }
        if (a>b) {
            int new_b = b*2;
            int new_a = a-b;
            if (!visited.count({new_a, new_b})) {
                visited[{new_a, new_b}] = 1;
                q.push({{new_a, new_b}, steps + "2"});
            }
        }
    }
    
    reverse(ans.begin(), ans.end());
    cout << ans.size() << endl;
    for (int i = 0; i < ans.size(); i++) {
        cout << ans[i] << " ";
    }
    cout << endl;
} 



signed main(){
   cin.tie(0)->sync_with_stdio(0);	 
   int T=1; 
   cin>>T;
   while(T--)solve();
   
    return 0;
}
