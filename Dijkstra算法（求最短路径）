#define INF 0x3f3f3f3f
void dijkstra(int s)//求源点s到其他点的最短路径
{  memset(vis,0,sizeof(vis));//0表示未确定的点，1表示已经确定的
   memset(dis,0x3f,sizeof(dis));//默认情况下设置无穷大
   dis[s]=0；
   while(1)
  {int mini=0,min_=INF;
   for(int j=1;j<=n;j++)
   {
    if(!vis[j]&&min_>dis[j])
    {mini=j;min_=dis[j];}
   }     
   }//如果没有未确定的点则结束
    if(mini==0)break;
    vis[mini]=1;
   for()
}
懒啦！弄懂再写~~
//4个月前的遗留问题，现在2.26号 来速刷一遍 离散加上acwing 已经吃透

写个常见的稀疏图的代码，正好巩固一下

#include<bits.stdc++.h>
using namespace std;
#define int itn 
#define icn cin
typedef pair<int,int> PII
 const int N=1e6+10;

itn e[N],h[N],ne[N],idx,w[N];
int d[N];
bool f[N];

void add(itn a,int b,int c)
{
 e[idx]=b;ne[idx]=h[a];w[idx]=c;h[a]=idx++;
}

itn dj()
{ memset(d,0x3f,sizeof d);
  d[1]=0;
 f[1]=1;
  priority_queue<PII,vector<PII>,greater<PII>>q;
  q.push({0,1});
  while(q.size())
{
 auto t=q.front();q.pop();
 
int ver=t.second,distence=t.first;
if(f[ver])continue;
f[ver]=1;
 for(itn i=h[ver];i!=-1;i=ne[i])
 {
  int j=e[i];
   if(d[j]>distence+w[i])
   {
     d[j]=distence+w[i];
    q.push({d[j],j});
   }

 }


}
if(d[n]==0x3f3f3f3f)return 1;
else return 0;
}

signed main()
{itn n,m;cin>>n>>m;
memset(h,-1,sizeof h);
 while(m--)
{
 itn a,b,c;add(a,b,c);
}
if(dj())cout<<"-1";
else cout<<d[n];
 return 0
}
