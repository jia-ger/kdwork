#include <bits/stdc++.h>
using namespace std;
#define itn int
#define icn cin
#define int long long
#define endl '\n'
typedef pair<int,int> PII;
const int N=505;
const int mod=998244353;

char g[N][N];
int dp[2][N][N]; // dp[j][k]表示到达(i,j)用了k次'?'的最大值
                 //这里用滚动数组来压缩空间 
int n, m, x;

void solve() {
    cin >> n >> m >> x;
    for (int i = 1; i <= n; i++) 
        for (int j = 1; j <= m; j++) 
        cin >> g[i][j];
     for(int i=0;i<=m;i++)
        for(int j=0;j<=x;j++)
            dp[0][i][j]=dp[1][i][j]=0;                

    for(int i=1;i<=n;i++)
     for(int j=1;j<=m;j++)
     {
     	if(g[i][j]=='1') 
     	dp[i&1][j][0]=max(dp[i&1][j-1][0]+1,dp[(i-1)&1][j][0]+1);
     	else 
     	dp[i&1][j][0]=max(dp[i&1][j-1][0],dp[(i-1)&1][j][0]);
     	for(int k=1;k<=x;k++)
		{
		if(g[i][j]=='1') 
     	dp[i&1][j][k]=max(dp[i&1][j-1][k]+1,dp[(i-1)&1][j][k]+1);
     	else 
     	dp[i&1][j][k]=max(dp[i&1][j-1][k],dp[(i-1)&1][j][k]);
     	
     	if(g[i][j]=='?') 
		dp[i&1][j][k]=max(dp[i&1][j][k],max(dp[i&1][j-1][k-1],dp[(i-1)&1][j][k-1])+1);
			
		}  
     	
	 }
	int ans=dp[n&1][m][0];
	
	for(int i=1;i<=x;i++)
	ans=max(ans,dp[n&1][m][i]);
	    
    cout << ans << endl;
}

signed main() {
    cin.tie(0)->sync_with_stdio(0);	
    
    int t = 1; 
    cin >> t;
    while (t--) solve();
    
    return 0;
}
