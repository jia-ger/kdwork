任何一个正整数都可以用 2 的幂次方表示。例如 137=2^7 +2^3+2^0同时约定次方用括号来表示，即 a b
可表示为 a(b)。由此可知，137 可表示为 2(7)+2(3)+2(0)
进一步：7=2^2+2+2^0  ( 21  用 22 表示)，并且 3=2+2^0
所以最后 137 可表示为2(2(2)+2+2(0))+2(2+2(0))+2(0)。
又如 1315=2^10 +2^8+2^5+2+1所以 1315 最后可表示为 2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)。
输入格式
一行一个正整数 n。
输出格式符合约定的 n的 0,2 表示（在表示中不能有空格）。

题解
#include<iostream>
#include<cmath>
using namespace std;
int a;
void fff(int x)
{
    for(int i=14;i>=0;i--) //两万的数据最多是2（14）
    {
        if(pow(2,i)<=x){
        //pow（n，m）在cmath库中，返回n^m；枚举出第一个幂次方
            if(i==1) cout<<"2"; //2（1）不用再往后分解了且2^1输出为2，单独出来
            else if(i==0) cout<<"2(0)"; //2（0）也不用再往后分解了，单独出来
            else{ //若i>1则继续分解指数i
                cout<<"2(";
            fff(i);
            cout<<")";
            }
            x-=pow(2,i); //继续循环分解余下的
            if(x!=0) cout<<"+";
            //加号处理的最简单方法：若此x还没分解完，则后面还有项，所以输出一个+号
        }
    }
}
int main()
{
    cin>>a;
    fff(a);
    return 0;
}
