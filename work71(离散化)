假定有一个无限长的数轴，数轴上每个坐标上的数都是 0
现在，我们首先进行 n次操作，每次操作将某一位置 x 上的数加 c
接下来，进行 m 次询问，每个询问包含两个整数 l 和 r，你需要求出在区间 [l,r] 之间的所有数的和。
输入格式第一行包含两个整数 n 和 m接下来 n 行，每行包含两个整数 x 和 c再接下来 m 行，每行包含两个整数 l 和 r
输出格式
共 m 行，每行输出一个询问中所求的区间内数字和。

题解
#include<bits/stdc++.h>
using namespace std;
#define icn cin
#define itn int 
//#define int long long

int n,m;
vector<int>alls;//映射,真实下标与虚拟下标（从0开始） 
vector<pair<int ,int>>add,qu;//保存原来值
const int N=300010;
int a[N],s[N];


int find(int x)
{
	int l=0,r=alls.size()-1;
     while(l<r)
     {int mid=l+r>>1;
     	if(alls[mid]>=x)r=mid;
     	else l=mid+1;
     	
	 }
	return r+1; //因为要求前缀和，故下标从1开始方便，不用额外的再处理边界
} 

signed main()
{   cin>>n>>m;
    for(int i=0;i<n;i++)
    {int x,c;cin>>x>>c;
    	add.push_back({x,c});
    	alls.push_back(x);
	}
	for(itn i=0;i<m;i++)
	{ int l,r;cin>>l>>r;
		qu.push_back({l,r});
		alls.push_back(l);
		alls.push_back(r);
	}
	sort(alls.begin(),alls.end());
	alls.erase(unique(alls.begin(),alls.end()),alls.end());
	for(auto i:add)
	{int x=find(i.first);
	 a[x]=a[x]+i.second;	
		
	}
	for(int i=1;i<=alls.size();i++)
	{
		s[i]=s[i-1]+a[i];
		
		
	}
	for(auto item:qu)
	{
		int l=find(item.first) ,r=find(item.second) ;
		cout<<s[r]-s[l-1]<<endl;
		
	}
	return 0;
}
